<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PyQt5 自定义窗口标题栏, 实现窗口拖拽</title>
    <link href="/2020/02/13/PyQt5%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AA%97%E5%8F%A3%E6%A0%87%E9%A2%98%E6%A0%8F,%E5%AE%9E%E7%8E%B0%E7%AA%97%E5%8F%A3%E6%8B%96%E6%8B%BD/"/>
    <url>/2020/02/13/PyQt5%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AA%97%E5%8F%A3%E6%A0%87%E9%A2%98%E6%A0%8F,%E5%AE%9E%E7%8E%B0%E7%AA%97%E5%8F%A3%E6%8B%96%E6%8B%BD/</url>
    
    <content type="html"><![CDATA[<p>最近在使用pyqt5做窗口应用程序，因为原始的标题栏不能满足需求我们常常会使用到自定义的标题栏。<br>本篇放上一个最简单的例子提供参考</p><h2 id="隐藏原始标题栏"><a href="#隐藏原始标题栏" class="headerlink" title="隐藏原始标题栏"></a>隐藏原始标题栏</h2><pre><code>class test(QMainWindow):    def __init__(self):        super(test, self).__init__(None, Qt.FramelessWindowHint)  # 无边框设置        self.setFixedSize(880, 640)        self.setStyleSheet(&quot;QMainWindow{background:rgba(255,255,255,255)}&quot;)        self.init()</code></pre><blockquote><p>使用 Qt.FramelessWindowHint将我们的窗口设置为无边框窗口</p></blockquote><h2 id="创建一个标题栏"><a href="#创建一个标题栏" class="headerlink" title="创建一个标题栏"></a>创建一个标题栏</h2><pre><code>    def init(self):        # 创建一个标题栏        self.titlebar = QLabel(self)        self.titlebar.setFixedSize(880, 40)        self.titlebar.move(0, 0)        self.titlebar.setStyleSheet(&quot;QLabel{background:rgba(245,245,245,255)}&quot;)        # 图标        self.icon = QLabel(self)        self.icon.setFixedSize(20, 20)        self.icon.move(10, 10)        self.icon.setStyleSheet(&quot;QLabel{background-image: url(image/main_win/icon.png)}&quot;)        # 标题        self.title = QLabel(self)        self.title.setText(&#39;我的自定义标题栏&#39;)        self.title.move(37, 6)        self.title.setStyleSheet(&quot;QLabel{font-size:14px;&quot;                                 &quot;font-family:Microsoft YaHei;&quot;                                 &quot;font-weight:400;&quot;                                 &quot;color:rgba(51,51,51,1);&quot;                                 &quot;line-height:1px;&quot;)        # 关闭按钮        self.close_btn = QPushButton(self)        self.close_btn.setFixedSize(16, 16)        self.close_btn.move(842, 18)        self.close_btn.setStyleSheet(&quot;QPushButton{background-image: url(image/main_win/close.png);&quot;                                     &quot;border:none}&quot;)        self.close_btn.pressed.connect(self.close)        # # 最大化按钮        # self.max_btn = QPushButton(self)        # self.max_btn.setFixedSize(16, 16)        # self.max_btn.move(792, 18)        # self.max_btn.setStyleSheet(&quot;QPushButton{background-image: url(image/main_win/min.png);&quot;        #                            &quot;border:none}&quot;)        # self.max_btn.pressed.connect(self.ShowRestoreWindow)        # 最小化按钮        self.min_btn = QPushButton(self)        self.min_btn.setFixedSize(16, 16)        self.min_btn.move(742, 18)        self.min_btn.setStyleSheet(&quot;QPushButton{background-image: url(image/main_win/min.png);&quot;                                   &quot;border:none}&quot;)        self.min_btn.pressed.connect(self.showMinimized)    # def ShowRestoreWindow(self):    #     &quot;&quot;&quot;窗口最大化以及恢复&quot;&quot;&quot;    #     if self.isMaximized():    #         self.showNormal()    #     else:    #         self.showMaximized()    #     self.titleSize()    def mousePressEvent(self, QMouseEvent):        &quot;&quot;&quot;鼠标点击事件&quot;&quot;&quot;        self.isPressed = True        self.startMovePos = QMouseEvent.globalPos()    def mouseMoveEvent(self, QMouseEvent):        &quot;&quot;&quot;鼠标拖拽事件&quot;&quot;&quot;        if self.isPressed:            movePoint = QMouseEvent.globalPos() - self.startMovePos            widgetPos = self.pos()            self.startMovePos = QMouseEvent.globalPos()            self.move(widgetPos.x() + movePoint.x(), widgetPos.y() + movePoint.y())    def mouseReleaseEvent(self, QMouseEvent):        &quot;&quot;&quot;鼠标放开事件&quot;&quot;&quot;        self.isPressed = False</code></pre><blockquote><p>这里我注释掉了最大化窗口事件，因为没有做好控件的自适应方案。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>PyQt5 应用</tag>
      
      <tag>自定义标题栏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客搭建</title>
    <link href="/2020/02/10/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/02/10/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>本文用于记录我在创建hexo博客时的方法和步骤。<br>这是我第一次创建自己的博客，使用hexo主要是因为他的创建方法很简单，还可以通过git部署到公网。<br>这篇文章大部分参考了hexo的 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a> 所有内容在官方文档中都有更加详细的说明。</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网</a></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在你要存放博客的文件夹下使用命令窗口输入:</p><pre><code>$ npm install -g hexo-cli</code></pre><p>hexo是机遇 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a> 的，所以在安装hexo之前我们需要先安装好Node.js<br>因为我们后面要使用git将我们的博客部署到公网所以也需要先把 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a> 安装好</p><blockquote><p>使用Node.js官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选）</p></blockquote><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><pre><code>$ hexo init$ npm install</code></pre><p>这个过程需要一些时间<br>创建好后会得到这样的文件结构</p><pre><code>.|——_config.yml  # 网站的配置信息|——package.json  # 应用程序信息|——scaffolds  # 模板文件夹|——source  # 资源文件夹|  |__ _posts  # 文章文件夹|__themes  # 主题文件夹</code></pre><p>我们可以在 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中修改大部分的配置<br>到这里我们的hexo博客就建好了，接下来就是将我们的博客部署到公网上了。这部分的内容放到之后再更新上来。</p>]]></content>
    
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/01/22/hello-world/"/>
    <url>/2020/01/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
