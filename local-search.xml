<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PyQt5自定义控件之环形进度条</title>
    <link href="/2020/02/28/PyQt5%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E4%B9%8B%E7%8E%AF%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <url>/2020/02/28/PyQt5%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E4%B9%8B%E7%8E%AF%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
    
    <content type="html"><![CDATA[<p>本文包含了QTimeLine、QPainter模块的运用<br>使用Qpainter绘制圆环图案，QTimeLine实现填充动画。<a href="https://blog.csdn.net/gongjianbo1992/article/details/103571569" target="_blank" rel="noopener">参考</a><br>追加了数字文字的变化动画。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>from PyQt5.Qt import QColor, QRectF, QConicalGradientfrom PyQt5.QtCore import Qt, QTimeLinefrom PyQt5.QtGui import QPainter, QPainterPath, QFontfrom PyQt5.QtWidgets import QLabelclass RingStatistics(QLabel):    def __init__(self, parent, width, color, ring_color=QColor(0, 0, 0, 0), gradient=None):        super(RingStatistics, self).__init__(parent)        # 记录角度        self.angle = 0        self.Ptext = &#39;0&#39;        self.precision = &#39;1&#39;        # 这个是用于绘制的，angle才是真实的角度        self.drawAngle = self.angle        self.drawText = self.Ptext        # 进度条宽度        self.lineWidth = width        # 环形时间轴        self.ringTime = QTimeLine(1000, self)        self.ringTime.frameChanged.connect(self.ringTimeline)        # 文字时间轴        self.textTime = QTimeLine(1000, self)        self.textTime.frameChanged.connect(self.TextTimeline)        # 填充色        self.color = color        self.ring_color = ring_color        # 渐变色        if gradient:            self.gradient = gradient        else:            self.gradient = self.color    def ringTimeline(self, frame):        &quot;&quot;&quot;环形时间轴&quot;&quot;&quot;        self.drawAngle = frame        self.update()    def TextTimeline(self, frame):        &quot;&quot;&quot;文字时间轴&quot;&quot;&quot;        self.drawText = format(float(frame) * float(self.precision), &#39;.&#39; + str(len(self.precision.split(&quot;.&quot;)[1])) + &#39;f&#39;)        self.update()    def setAngle(self, value, text):        &quot;&quot;&quot;设置值、播放动画&quot;&quot;&quot;        self.drawAngle = self.angle        self.angle = int(value * 360)        self.drawText = self.FloatToInt(self.Ptext)        self.Ptext = self.FloatToInt(float(text))        self.ringTime.stop()        self.ringTime.setFrameRange(self.drawAngle, self.angle)        self.ringTime.start()        self.textTime.stop()        self.textTime.setFrameRange(self.drawText, self.Ptext)        self.textTime.start()    def setPText(self, p_str=&#39;0&#39;, size=18, font=&#39;微软雅黑&#39;, color=QColor(0, 0, 0, 0), unit=&#39;&#39;):        &quot;&quot;&quot;初始化绘制的文字&quot;&quot;&quot;        self.Ptext = p_str        self.Psize = size        self.Pfont = font        self.Pcolor = color        self.unit = unit    def paintEvent(self, event):        the_rect = QRectF(0, 0, self.width(), self.height())        if the_rect.isNull():            return        # 画笔        painter = QPainter(self)        painter.fillRect(the_rect, QColor(0, 0, 0, 0))        painter.setRenderHints(QPainter.Antialiasing | QPainter.SmoothPixmapTransform, on=True)        # 镜像翻转，这样就是顺时针        painter.setViewport(self.width(), 0, -self.width(), self.height())        # 填充两个圆相交的部分        the_path = QPainterPath()        the_path.addEllipse(the_rect.adjusted(1, 1, -1, -1))        the_path.addEllipse(the_rect.adjusted(            1 + self.lineWidth, 1 + self.lineWidth, -1 - self.lineWidth, -1 - self.lineWidth))        painter.fillPath(the_path, self.ring_color)        # 径向渐变（参数为中心点和起始角度），默认时从右侧开始逆时针算的        the_gradient = QConicalGradient(the_rect.center(), 90)        the_angle = self.drawAngle / 360        the_gradient.setColorAt(0, self.color)        the_gradient.setColorAt(the_angle, self.gradient)        if the_angle + 0.001 &lt; 1:            the_gradient.setColorAt(the_angle + 0.001, QColor(0, 0, 0, 0))        painter.fillPath(the_path, the_gradient)        p = QPainter(self)        p.setRenderHint(QPainter.TextAntialiasing, True)        p.setPen(self.Pcolor)        p.setFont(QFont(self.Pfont, self.Psize))        if &#39;_&#39; in self.unit:            if self.unit[0] == &#39;_&#39;:                s = str(self.drawText) + self.unit[1:]            else:                s = self.unit[:-1] + str(self.drawText)        else:            s = str(self.drawText)        p.drawText(self.rect(), Qt.AlignCenter, s)    def FloatToInt(self, f):        &quot;&quot;&quot;处理浮点数数据&quot;&quot;&quot;        if &#39;.&#39; in str(f):            self.precision = &#39;0.&#39;            i = 0            while i &lt; len(str(f).split(&quot;.&quot;)[1]):                if i &lt; len(str(f).split(&quot;.&quot;)[1]) - 1:                    self.precision = self.precision + &#39;0&#39;                else:                    self.precision = self.precision + &#39;1&#39;                i += 1            return int(float(f) / float(self.precision))        else:            self.precision = &#39;1&#39;            return int(f)</code></pre><h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><pre><code>    def ringTimeline(self, frame):        &quot;&quot;&quot;环形时间轴&quot;&quot;&quot;        self.drawAngle = frame        self.update()    def TextTimeline(self, frame):        &quot;&quot;&quot;文字时间轴&quot;&quot;&quot;        self.drawText = format(float(frame) * float(self.precision), &#39;.&#39; + str(len(self.precision.split(&quot;.&quot;)[1])) + &#39;f&#39;)        self.update()    def setAngle(self, value, text):        &quot;&quot;&quot;设置值、播放动画&quot;&quot;&quot;        self.drawAngle = self.angle        self.angle = int(value * 360)        self.drawText = self.FloatToInt(self.Ptext)        self.Ptext = self.FloatToInt(float(text))        self.ringTime.stop()        self.ringTime.setFrameRange(self.drawAngle, self.angle)        self.ringTime.start()        self.textTime.stop()        self.textTime.setFrameRange(self.drawText, self.Ptext)        self.textTime.start()</code></pre><blockquote><p>QTimeLine.setFrameRange() 设置动画起始值，和目标值。这里参数为 int 类型参数。</p></blockquote><pre><code>    def paintEvent(self, event):        the_rect = QRectF(0, 0, self.width(), self.height())        if the_rect.isNull():            return        # 画笔        painter = QPainter(self)        painter.fillRect(the_rect, QColor(0, 0, 0, 0))        painter.setRenderHints(QPainter.Antialiasing | QPainter.SmoothPixmapTransform, on=True)        # 镜像翻转，这样就是顺时针        painter.setViewport(self.width(), 0, -self.width(), self.height())        # 填充两个圆相交的部分        the_path = QPainterPath()        the_path.addEllipse(the_rect.adjusted(1, 1, -1, -1))        the_path.addEllipse(the_rect.adjusted(            1 + self.lineWidth, 1 + self.lineWidth, -1 - self.lineWidth, -1 - self.lineWidth))        painter.fillPath(the_path, self.ring_color)        # 径向渐变（参数为中心点和起始角度），默认时从右侧开始逆时针算的        the_gradient = QConicalGradient(the_rect.center(), 90)        the_angle = self.drawAngle / 360        the_gradient.setColorAt(0, self.color)        the_gradient.setColorAt(the_angle, self.gradient)        if the_angle + 0.001 &lt; 1:            the_gradient.setColorAt(the_angle + 0.001, QColor(0, 0, 0, 0))        painter.fillPath(the_path, the_gradient)        # 绘制文字        p = QPainter(self)        p.setRenderHint(QPainter.TextAntialiasing, True)        p.setPen(self.Pcolor)        p.setFont(QFont(self.Pfont, self.Psize))        if &#39;_&#39; in self.unit:            if self.unit[0] == &#39;_&#39;:                s = str(self.drawText) + self.unit[1:]            else:                s = self.unit[:-1] + str(self.drawText)        else:            s = str(self.drawText)        p.drawText(self.rect(), Qt.AlignCenter, s)</code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="QPainterPath"><a href="#QPainterPath" class="headerlink" title="QPainterPath:"></a>QPainterPath:</h3><pre><code>QPainterPath.addEllipse  # 绘制椭圆形QPainterPath.addPolygon  # 多边形QPainterPath.addRect     # 矩形QPainterPath.addText     # 文字QPainterPath.arcTo       # 弧形QPainterPath.cubicTo     # 贝塞尔曲线</code></pre><h3 id="QRectF"><a href="#QRectF" class="headerlink" title="QRectF"></a>QRectF</h3><pre><code>QRectF.adjusted  # 四个端点的坐标偏移</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>PyQt5</tag>
      
      <tag>样式</tag>
      
      <tag>动画</tag>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QtWebEngineWidgets在某些设备上崩溃的问题</title>
    <link href="/2020/02/24/QtWebEngineWidgets%E5%9C%A8%E6%9F%90%E4%BA%9B%E8%AE%BE%E5%A4%87%E4%B8%8A%E5%B4%A9%E6%BA%83%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/02/24/QtWebEngineWidgets%E5%9C%A8%E6%9F%90%E4%BA%9B%E8%AE%BE%E5%A4%87%E4%B8%8A%E5%B4%A9%E6%BA%83%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>今天遇到一个比较头疼的问题，使用了QtWebEngineWidgets模块开发的程序导出exe文件之后在某些设备上会崩溃的问题。<br>我碰到的设备具体都是win7的设备。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>这个问题不是很常见，网上答案也不多，大多说的是因为显卡驱动的原因，需要更新显卡驱动。不过我没有试过，具体有没有不知道。</p><p>而我使用的方法呢，是来自 <a href="https://blog.csdn.net/xujun1991/article/details/88122506?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">CSND</a> 上的文章他的第二点：</p><pre><code>2.必须把libEGL.dll、libGLESv2.dll、d3dcompiler_47.dll、opengl32sw.dll这些文件拷贝到对应的exe路径下。</code></pre><p>这里稍微有些不一样的地方，只需要将 程序的运行目录下\PyQt5\Qt\bin 里面的</p><pre><code>libEGL.dll；libGLESv2.dll；d3dcompiler_47.dll；opengl32sw.dll</code></pre><p>四个dll拷贝到exe运行路径下就可以正常运行了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>PyQt5</tag>
      
      <tag>QtWebEngineWidgets</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用的PyQt5控件样式表</title>
    <link href="/2020/02/21/%E5%B8%B8%E7%94%A8%E7%9A%84PyQt5%E6%8E%A7%E4%BB%B6%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    <url>/2020/02/21/%E5%B8%B8%E7%94%A8%E7%9A%84PyQt5%E6%8E%A7%E4%BB%B6%E6%A0%B7%E5%BC%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>在最近的工作中大量的使用了PyQt的.setStyleSheet方法来对控件的样式进行自定义，或者制作自己的控件</p><h2 id="常用样式"><a href="#常用样式" class="headerlink" title="常用样式"></a>常用样式</h2><pre><code>背景类：    background:rgb(245,254,254,1);    background-image:url(.../xxx.png);    border-image:url(.../xxx.png);</code></pre><blockquote><p>注意：这里 background-image 和 border-image 都是设置背景图片，区别在于 border-image 图片可以自动适应控件的大小，而 background-image 不行。</p></blockquote><pre><code>文字类：    font-size:14px;  # 字号    font-family:Microsoft YaHei;  # 字体    font-weight:400;  # 笔重    color:rgba(30,159,255,1);  # 颜色    line-height:40px;  # 行距</code></pre><pre><code>边框类：    border:none;  # 无边框    border:1px solid rgb(255, 255, 255, 1);  # 全边框    border-top:1px solid rgb(255, 255, 255, 1);  # 上边框    border-right:1px solid rgb(255, 255, 255, 1);  # 右边框    border-left:1px solid rgb(255, 255, 255, 1);  # 左边框    border-bottom:1px solid rgb(255, 255, 255, 1);  # 下边框    border-radius:60%;  # 圆角，也可以使用像素做参数    padding-top:1px;  # 边距    padding-right:1px;    padding-left:1px;    padding-bottom:1px;    opacity:0.9;  # 透明度</code></pre><h2 id="控件设置"><a href="#控件设置" class="headerlink" title="控件设置"></a>控件设置</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><pre><code>QLabel{font-size:14px;       font-family:Microsoft YaHei;       font-weight:400;       color:rgba(51,51,51,1);       line-height:40px}</code></pre><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><pre><code>QPushButton{background:rgb(255,255,255,1);            border:none;            border-radius:25%}# 鼠标悬停样式            QPushButton:hover{background:rgb(30,159,255,1)}# 选中样式QPushButton:disabled{border-image: url(.../被选中.png)}</code></pre><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><pre><code>QComboBox{background:rgba(245,245,245,1);          font-size:14px;          font-family:Microsoft YaHei;          font-weight:400;          color:rgba(51,51,51,1);          line-height:1px;          border:1px solid rgba(179,179,179,1);          border-radius:2px;          padding-left:18px}# 下拉按钮          QComboBox::drop-down{width: 52px;                     border: none}# 下拉按钮图标                     QComboBox::down-arrow {border-image: url(.../向下.png);                       height:16px;                       width:12px}# 下面三项需要先设置下面代码self.QComboBox.currentIndexChanged.connect(self.main_info.usernamechange)self.QComboBox.setView(QListView())# 下拉框样式QListView{outline:0px}# 下拉框选项QListView::item{border-bottom:1px solid rgb(230, 230, 230, 1);                padding-left:2px;                font-size:12px;                font-weight:400;                color:rgba(51,51,51,1);                line-height:1px;                height:18px}# 下拉框选项鼠标悬停QListView::item::hover{background:rgba(245, 245, 254, 0.9)})</code></pre><h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><pre><code>QLineEdit{background:rgba(245,245,245,1);          border:1px solid rgba(30,159,255,1);          opacity:0.9;             border-radius:2px;          font-size:14px;          font-family:Microsoft YaHei;          font-weight:400;          color:rgba(134,134,134,1);          line-height:72px;          padding-left:15px}</code></pre><h3 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a>滑块</h3><pre><code># 滑块条QSlider::groove:horizontal{border:none;                           height:12px}# 以划过部分                           QSlider::sub-page:horizontal{background:rgba(0,191,255,0.5);                             border-radius:6px}# 未划过部分                             QSlider::add-page:horizontal{background:rgba(230,230,230,1);                             border-radius:6px}# 滑块                             QSlider::handle:horizontal{background:rgba(0,191,255,1);                           border:none;                           width:20px;                           height:20px;                           margin-top:-4px;                           margin-bottom:-4px;                           border-radius:10px}</code></pre><blockquote><p>本文用于记录我在工作中常用的控件样式表，后续还会继续更新。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>PyQt5</tag>
      
      <tag>样式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyQt5 自定义窗口标题栏, 实现窗口拖拽</title>
    <link href="/2020/02/13/PyQt5%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AA%97%E5%8F%A3%E6%A0%87%E9%A2%98%E6%A0%8F,%E5%AE%9E%E7%8E%B0%E7%AA%97%E5%8F%A3%E6%8B%96%E6%8B%BD/"/>
    <url>/2020/02/13/PyQt5%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AA%97%E5%8F%A3%E6%A0%87%E9%A2%98%E6%A0%8F,%E5%AE%9E%E7%8E%B0%E7%AA%97%E5%8F%A3%E6%8B%96%E6%8B%BD/</url>
    
    <content type="html"><![CDATA[<p>最近在使用pyqt5做窗口应用程序，因为原始的标题栏不能满足需求我们常常会使用到自定义的标题栏。<br>本篇放上一个最简单的例子提供参考</p><h2 id="隐藏原始标题栏"><a href="#隐藏原始标题栏" class="headerlink" title="隐藏原始标题栏"></a>隐藏原始标题栏</h2><pre><code>class test(QMainWindow):    def __init__(self):        super(test, self).__init__(None, Qt.FramelessWindowHint)  # 无边框设置        self.setFixedSize(880, 640)        self.setStyleSheet(&quot;QMainWindow{background:rgba(255,255,255,255)}&quot;)        self.init()</code></pre><blockquote><p>使用 Qt.FramelessWindowHint将我们的窗口设置为无边框窗口</p></blockquote><h2 id="创建一个标题栏"><a href="#创建一个标题栏" class="headerlink" title="创建一个标题栏"></a>创建一个标题栏</h2><pre><code>    def init(self):        # 创建一个标题栏        self.titlebar = QLabel(self)        self.titlebar.setFixedSize(880, 40)        self.titlebar.move(0, 0)        self.titlebar.setStyleSheet(&quot;QLabel{background:rgba(245,245,245,255)}&quot;)        # 图标        self.icon = QLabel(self)        self.icon.setFixedSize(20, 20)        self.icon.move(10, 10)        self.icon.setStyleSheet(&quot;QLabel{background-image: url(image/main_win/icon.png)}&quot;)        # 标题        self.title = QLabel(self)        self.title.setText(&#39;我的自定义标题栏&#39;)        self.title.move(37, 6)        self.title.setStyleSheet(&quot;QLabel{font-size:14px;&quot;                                 &quot;font-family:Microsoft YaHei;&quot;                                 &quot;font-weight:400;&quot;                                 &quot;color:rgba(51,51,51,1);&quot;                                 &quot;line-height:1px;&quot;)        # 关闭按钮        self.close_btn = QPushButton(self)        self.close_btn.setFixedSize(16, 16)        self.close_btn.move(842, 18)        self.close_btn.setStyleSheet(&quot;QPushButton{background-image: url(image/main_win/close.png);&quot;                                     &quot;border:none}&quot;)        self.close_btn.pressed.connect(self.close)        # # 最大化按钮        # self.max_btn = QPushButton(self)        # self.max_btn.setFixedSize(16, 16)        # self.max_btn.move(792, 18)        # self.max_btn.setStyleSheet(&quot;QPushButton{background-image: url(image/main_win/min.png);&quot;        #                            &quot;border:none}&quot;)        # self.max_btn.pressed.connect(self.ShowRestoreWindow)        # 最小化按钮        self.min_btn = QPushButton(self)        self.min_btn.setFixedSize(16, 16)        self.min_btn.move(742, 18)        self.min_btn.setStyleSheet(&quot;QPushButton{background-image: url(image/main_win/min.png);&quot;                                   &quot;border:none}&quot;)        self.min_btn.pressed.connect(self.showMinimized)    # def ShowRestoreWindow(self):    #     &quot;&quot;&quot;窗口最大化以及恢复&quot;&quot;&quot;    #     if self.isMaximized():    #         self.showNormal()    #     else:    #         self.showMaximized()    #     self.titleSize()    def mousePressEvent(self, QMouseEvent):        &quot;&quot;&quot;鼠标点击事件&quot;&quot;&quot;        if QMouseEvent.y() &lt; self.titlebar.height():  # 限制在标题栏区域内            self.startMovePos = QMouseEvent.globalPos()    def mouseMoveEvent(self, QMouseEvent):        &quot;&quot;&quot;鼠标拖拽事件&quot;&quot;&quot;        if QMouseEvent.y() &lt; self.titlebar.height():  # 限制在标题栏区域内            movePoint = QMouseEvent.globalPos() - self.startMovePos            widgetPos = self.pos()            self.startMovePos = QMouseEvent.globalPos()            self.move(widgetPos.x() + movePoint.x(), widgetPos.y() + movePoint.y())</code></pre><blockquote><p>这里我注释掉了最大化窗口事件，因为没有做好控件的自适应方案。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>PyQt5 应用</tag>
      
      <tag>自定义标题栏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客搭建及git部署</title>
    <link href="/2020/02/10/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8Agit%E9%83%A8%E7%BD%B2/"/>
    <url>/2020/02/10/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8Agit%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>本文用于记录我在创建hexo博客时的方法和步骤。<br>这是我第一次创建自己的博客，使用hexo主要是因为他的创建方法很简单，还可以通过git部署到公网。<br>这篇文章大部分参考了hexo的 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a> 所有内容在官方文档中都有更加详细的说明。</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网</a></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在你要存放博客的文件夹下使用命令窗口输入:</p><pre><code>$ npm install -g hexo-cli</code></pre><p>hexo是机遇 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a> 的，所以在安装hexo之前我们需要先安装好Node.js<br>因为我们后面要使用git将我们的博客部署到公网所以也需要先把 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a> 安装好</p><blockquote><p>使用Node.js官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选）</p></blockquote><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><pre><code>$ hexo init$ npm install</code></pre><p>这个过程需要一些时间<br>创建好后会得到这样的文件结构</p><pre><code>.|——_config.yml  # 网站的配置信息|——package.json  # 应用程序信息|——scaffolds  # 模板文件夹|——source  # 资源文件夹|  |__ _posts  # 文章文件夹|__themes  # 主题文件夹</code></pre><p>我们可以在 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中修改大部分的配置<br>到这里我们的hexo博客就建好了，接下来就是将我们的博客部署到公网上了。</p><h2 id="博客部署到公网"><a href="#博客部署到公网" class="headerlink" title="博客部署到公网"></a>博客部署到公网</h2><p>关于如何将博客部署到公网，这里就要用到我们强大的git了。</p><p>首先我们需要在git上创建一个新仓库。</p><blockquote><p>注意: 仓库名必须是 [你的github用户名.github.io]</p></blockquote><p>然后我们需要生成ssh秘钥文件，因为Hexo部署在github上是通过密钥配对上传的。<br>Windows搜索打开Git Bash 输入</p><pre><code>git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;cd ~/.ssh</code></pre><p>Windows密钥文件在C:/Users/你的用户名/.ssh目录下。<br>打开git个人设置-SSH and GPG keys 页面- New SSH key 将刚刚复制的id_rsa.pub内容粘贴到key，最后点击Add SSH key。</p><h3 id="网站部署"><a href="#网站部署" class="headerlink" title="网站部署"></a>网站部署</h3><p>设置好git仓库后还需要修改hexo的配置文件，修改_config.yml</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: https://github.com/你的github用户名/你的github用户名.github.io.git  branch: master</code></pre><p>修改好后使用</p><pre><code>hexo d</code></pre><p>既可以在公网上通过 [你的github用户名.github.io] 看到你的个人博客啦。</p><h2 id="git同步管理"><a href="#git同步管理" class="headerlink" title="git同步管理"></a>git同步管理</h2><p>既然我们使用了git部署个人博客，那么能不能使用git来做博客的同步管理呢？<br>当然是可以的。<br>在博客根目录下打开Git Bassh</p><pre><code>git init #git初始化git remote add origin https://github.com/你的GitHub用户名/你的GitHub用户名.github.io.git #添加仓库地址git checkout -b 分支名 #新建分支并切换到新建的分支git add . #添加所有本地文件到gitgit commit -m &quot;这里填写你本次提交的备注&quot; #git提交git push origin 分支名 #文件推送到hexo分支</code></pre><p>比如这样：</p><pre><code>git init #git初始化git remote add origin https://github.com/xxx/xxx.github.io.git #添加仓库地址git checkout -b hexo #新建分支并切换到新建的分支git add . #添加所有本地文件到gitgit commit -m &quot;我的hexo同步文件&quot; #git提交git push origin hexo #文件推送到hexo分支</code></pre><p>这样就把博客项目上传到了git仓库的hexo分支下</p><h3 id="在另一台电脑下载博客工程"><a href="#在另一台电脑下载博客工程" class="headerlink" title="在另一台电脑下载博客工程"></a>在另一台电脑下载博客工程</h3><pre><code>git clone -b 分支名 https://github.com/你的GitHub用户/你的GitHub用户.github.io.git</code></pre><p>克隆下载完成后，进入到你项目的文件夹，配置你的hexo环境</p><pre><code>npm install -g hexo-cli #安装hexo,注意这里不需要hexo初始化,否则之前的hexo配置参数会重置npm install #安装依赖库npm install hexo-deployer-git #安装git部署相关配置</code></pre><blockquote><p>这里同样是要使用到ssh秘钥的，生成方式同上</p></blockquote><h3 id="文件的上传和更新"><a href="#文件的上传和更新" class="headerlink" title="文件的上传和更新"></a>文件的上传和更新</h3><pre><code>git add .git commit -m &quot;这里填写你本次提交的备注&quot;git push origin 分支名</code></pre><p>需要更新git上的项目文件时只需要执行上面的代码即可</p><p>同步只需要执行</p><pre><code>git pull</code></pre><p>到这我们不仅将博客部署到了公网上，还能够通过git进行同步管理啦。</p>]]></content>
    
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>git同步</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/01/22/hello-world/"/>
    <url>/2020/01/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
